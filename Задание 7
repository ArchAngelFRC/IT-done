#include <iostream>
#include <vector>
#include <limits>
using namespace std;

const int INF = numeric_limits<int>::max();

int findMinDistance(const vector<int>& distances, const vector<bool>& visited) {
    int minDistance = INF;
    int minIndex = -1;

    for (int i = 0; i < distances.size(); i++) {
        if (!visited[i] && distances[i] < minDistance) {
            minDistance = distances[i];
            minIndex = i;
        }
    }

    return minIndex;
}

void printShortestPaths(const vector<int>& distances) {
    for (int i = 0; i < distances.size(); i++) {
        cout << "Кратчайший путь от вершины 0 до вершины " << i << ": " << distances[i] << endl;
    }
}

void dijkstra(const vector<vector<int>>& graph, int startVertex) {
    int numVertices = graph.size();
    vector<int> distances(numVertices, INF);
    vector<bool> visited(numVertices, false);

    distances[startVertex] = 0;

    for (int i = 0; i < numVertices - 1; i++) {
        int minVertex = findMinDistance(distances, visited);
        visited[minVertex] = true;

        for (int j = 0; j < numVertices; j++) {
            if (!visited[j] && graph[minVertex][j] != 0 && distances[minVertex] != INF &&
                distances[minVertex] + graph[minVertex][j] < distances[j]) {
                distances[j] = distances[minVertex] + graph[minVertex][j];
            }
        }
    }

    printShortestPaths(distances);
}

int main() {
    int numVertices;
    cout << "Введите количество вершин в графе: ";
    cin >> numVertices;

    vector<vector<int>> graph(numVertices, vector<int>(numVertices));

    cout << "Введите матрицу смежности графа:" << endl;
    for (int i = 0; i < numVertices; i++) {
        for (int j = 0; j < numVertices; j++) {
            cin >> graph[i][j];
        }
    }

    int startVertex;
    cout << "Введите начальную вершину: ";
    cin >> startVertex;

    dijkstra(graph, startVertex);

    return 0;
}
